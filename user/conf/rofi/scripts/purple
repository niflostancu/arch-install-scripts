#!/usr/bin/env python3

import time

import sys, operator
from collections import OrderedDict
import dbus

"""
@depends python-dbus
"""

bus = dbus.SessionBus()
obj = bus.get_object("im.pidgin.purple.PurpleService", "/im/pidgin/purple/PurpleObject")
purple = dbus.Interface(obj, "im.pidgin.purple.PurpleInterface")

# get list of accounts
accounts = purple.PurpleAccountsGetAllActive()

users = []
userMap = OrderedDict()

for accountId in accounts:
    connectionId = purple.PurpleAccountGetConnection(accountId)
    accountName = purple.PurpleAccountGetUsername(accountId)
    protocolName = purple.PurpleAccountGetProtocolName(accountId)
    connectionName = purple.PurpleConnectionGetDisplayName(connectionId)
    protocol = purple.PurpleConnectionGetDisplayName(connectionId)

    if not connectionId: continue

    # get list of users for an account
    userIds = purple.PurpleFindBuddies(accountId, "")

    for userId in userIds:
        user = {
            "id": userId,
            "name": purple.PurpleBuddyGetName(userId),
            "alias": purple.PurpleBuddyGetAlias(userId),
            "accountId": accountId,
            "account": accountName,
            "protocol": protocolName,
            "connectionName": connectionName
        }
        user["score"] = purple.PurpleLogGetActivityScore(1, user["name"], accountId)
        users.append(user)

users = sorted(users, key = operator.itemgetter('score'), reverse = True)
for user in users:
    userMap[user["alias"] + " [" + user["protocol"] + "] [" + user["account"] + "]"] = user


def getUser(userHash):
    return userMap[userHash]


# Send a message to `user`, which is some entry in `users`
def sendIm(userHash, message=""):
    if isinstance(userHash, str):
        user = getUser(userHash)
    if message is None:
        message = ""

    # First we make a new conversation
    # (the first arg is type="IM")
    conversationId = purple.PurpleConversationNew(1, user["accountId"], user["name"])
    purple.PurpleConversationPresent(conversationId)

    # Next we make a new IM out of the conversation (yep...)
    imId = purple.PurpleConvIm(conversationId)

    if message:
        # Finally we send the IM
        purple.PurpleConvImSend(imId, message)

    # Send a notification to highlight the conversation
    purple.PurpleConvImWrite(imId, "System", "Here's your conversation, as requested, sir!", 0x0004 | 0x8000
                             | 0x2000, time.time())


if len(sys.argv) > 1:
    username = sys.argv[1]
    message = sys.argv[2] if len(sys.argv) > 2 else None

    sendIm(username, message)
else:
    for userHash in userMap:
        print(userHash)

